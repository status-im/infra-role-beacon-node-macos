#!/usr/bin/env bash
# vim: ft=sh
set -e

function headIsDetached() {
    [[ $(git rev-parse --abbrev-ref --symbolic-full-name HEAD) == "HEAD" ]];
}

function binaryExists() {
    ls -l build/nimbus_beacon_node_${COMMIT} 2>&1 1>/dev/null
}

function fetchChanges() {
    # We cannot use "git pull" in here, because history may be changed upstream
    git fetch
    git reset --hard "origin/${BRANCH}"
}

function buildBinaries() {
    # Lower CPU priority so it doesn't affect the running beacon node
    NICE="nice -n 19"

    ${NICE} make -j6 update OVERRIDE=1
    ${NICE} make -j6 nimbus_beacon_node ncli_db \
        LOG_LEVEL="{{ beacon_node_build_log_level }}" \
        NIMFLAGS="{{ beacon_node_build_nim_flags }}"

    # Rename binaries to match commit they were built from.
    cd build/
    mv nimbus_beacon_node nimbus_beacon_node_${COMMIT}

    # Create a symbolic link to the latest version
    ln -fs nimbus_beacon_node_${COMMIT} nimbus_beacon_node
    cd ..

    # Delete copies that are older than N days
    find build -mtime +{{ beacon_node_build_days_kept }} -exec rm -r '{}' \+
}

#-------------------------------------------------------------------------------

BRANCH="{{ beacon_node_repo_branch }}"
SERVICE_PATH="{{ beacon_node_service_path }}"

echo " >>> Build Start: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
cd "${SERVICE_PATH}"

if [[ "${USER}" != "{{ beacon_node_user }}" ]]; then
    echo "Incorrect user: ${USER}" >&2
    echo "Expected: {{ beacon_node_user }}" >&2
    exit 1
fi

# Set correct PATH to find Homebrew binaries such as cmake.
eval "$({{ homebrew_path }}/bin/brew shellenv)"

# Build the Beacon node binaries
pushd repo >/dev/null

# Detached HEAD means we're probably on a tag
if headIsDetached; then
    echo " >>> Detached HEAD, nothing to fetch."
else
    echo " >>> Fetching changes..."
    fetchChanges
fi

COMMIT=$(git rev-parse --short=8 HEAD)

if binaryExists && [[ "$1" != "--force" ]]; then
    echo " >>> Binary already built. Run with --force flag to override"
else
    echo " >>> Building binaries..."
    buildBinaries

    # restart service
    echo " >>> Restarting service"
    cd {{ beacon_node_launchd_config_folder }}
    sudo launchctl unload {{ beacon_node_launchd_service_name }}.plist
    sudo launchctl load {{ beacon_node_launchd_service_name }}.plist
fi

popd >/dev/null

echo " >>> SUCCESS"
